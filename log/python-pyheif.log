[    0s] Using BUILD_ROOT=/var/cache/obs/worker/root_8/.mount
[    0s] Using BUILD_ARCH=riscv64
[    0s] Doing kvm build in /var/cache/obs/worker/root_8/root
[    0s] 
[    0s] 
[    0s] sheep88 started "build python-pyheif.spec" at Fri Apr  7 14:47:53 UTC 2023.
[    0s] 
[    0s] Building python-pyheif for project 'openSUSE:Factory:RISCV' repository 'standard' arch 'riscv64' srcmd5 '83850d9132b15ef3ea0349ae2701dbb0'
[    0s] 
[    0s] processing recipe /var/cache/obs/worker/root_8/.build-srcdir/python-pyheif.spec ...
[    0s] running changelog2spec --target rpm --file /var/cache/obs/worker/root_8/.build-srcdir/python-pyheif.spec
[    0s] init_buildsystem --configdir /var/run/obs/worker/8/build/configs --cachedir /var/cache/build --prepare --clean --rpmlist /var/cache/obs/worker/root_8/.build.rpmlist /var/cache/obs/worker/root_8/.build-srcdir/python-pyheif.spec build ...
[    0s] unpacking preinstall image openSUSE:Factory:RISCV/standard/preinstallimage-python [6efd43040641a4e5b27e0480460728bf]
[    2s] 
[    2s] copying packages...
[    3s] reordering...done
[    3s] Detected virtio-serial support
[    4s] booting kvm...
[    4s] ### VM INTERACTION START ###
[    4s] Using virtio-serial support
[    4s] /usr/bin/qemu-kvm -nodefaults -no-reboot -nographic -vga none -cpu host -M pc,accel=kvm,usb=off,dump-guest-core=off,vmport=off -sandbox on -bios /usr/share/qemu/qboot.rom -object rng-random,filename=/dev/hwrng,id=rng0 -device virtio-rng-pci,rng=rng0 -object iothread,id=io0 -runas qemu -net none -kernel /var/cache/obs/worker/root_8/.mount/boot/kernel -initrd /var/cache/obs/worker/root_8/.mount/boot/initrd -append root=/dev/disk/by-id/virtio-0 rootfstype=ext4 rootflags=noatime kvmclock mitigations=off elevator=noop nmi_watchdog=0 rw rd.driver.pre=binfmt_misc oops=panic panic=1 quiet console=hvc0 init=/.build/initvm.x86_64 -m 10240 -drive file=/var/cache/obs/worker/root_8/root,format=raw,if=none,id=disk,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=disk,serial=0 -drive file=/var/cache/obs/worker/root_8/swap,format=raw,if=none,id=swap,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=swap,serial=1 -device virtio-serial,max_ports=2 -device virtconsole,chardev=virtiocon0 -chardev stdio,id=virtiocon0 -chardev socket,id=monitor,server=on,wait=off,path=/var/cache/obs/worker/root_8/root.qemu/monitor -mon chardev=monitor,mode=readline -smp 4
[    7s] ### VM INTERACTION END ###
[    7s] 2nd stage started in virtual machine
[    8s] machine type: riscv64
[    8s] Linux version: 6.2.9-1-default #1 SMP PREEMPT_DYNAMIC Thu Mar 30 11:30:50 UTC 2023 (7a187a3)
[    8s] Increasing log level from now on...
[    8s] [    3.224383][  T370] sysrq: Changing Loglevel
[    8s] [    3.224579][  T370] sysrq: Loglevel set to 4
[    8s] Enable sysrq operations
[    8s] Setting up swapspace version 1, size = 2 GiB (2147479552 bytes)
[    8s] no label, UUID=f29a3b4d-8994-443f-9306-d6234348e7bc
[    8s] swapon: /dev/vdb: found signature [pagesize=4096, signature=swap]
[    8s] swapon: /dev/vdb: pagesize=4096, swapsize=2147483648, devsize=2147483648
[    8s] swapon /dev/vdb
[    8s] WARNING: udev not running, creating extra device nodes
[    9s] logging output to //.build.log...
[    9s] processing recipe /.build-srcdir/python-pyheif.spec ...
[    9s] init_buildsystem --configdir /.build/configs --cachedir /var/cache/build /.build-srcdir/python-pyheif.spec build ...
[    9s] initializing rpm db...
[   10s] querying package ids...
[   27s] [1/210] preinstalled aaa_base-84.87+git20230329.b39efbc-1.1
[   27s] [2/210] preinstalled aaa_base-malloccheck-84.87+git20230329.b39efbc-1.1
[   27s] [3/210] preinstalled attr-2.5.1-1.1
[   27s] [4/210] preinstalled bash-5.2.15-8.1
[   27s] [5/210] preinstalled bash-sh-5.2.15-8.1
[   27s] [6/210] preinstalled binutils-2.40-3.1
[   27s] [7/210] preinstalled brp-check-suse-84.87+git20230324.8680ce4-1.1
[   27s] [8/210] preinstalled build-compare-20221206T204012.bb70754-1.2
[   27s] [9/210] preinstalled build-mkbaselibs-20230314-1.1
[   27s] [10/210] preinstalled bzip2-1.0.8-5.1
[   27s] [11/210] preinstalled chkstat-1599_20230217-1.1
[   27s] [12/210] preinstalled compat-usrmerge-build-84.87-5.1
[   27s] [13/210] preinstalled compat-usrmerge-tools-84.87-5.1
[   27s] [14/210] preinstalled coreutils-9.2-1.1
[   27s] [15/210] preinstalled cpio-2.13-5.1
[   27s] [16/210] preinstalled cpp-13-1.1
[   27s] [17/210] preinstalled cpp13-13.0.1+git6669-7.1
[   27s] [18/210] preinstalled crypto-policies-20210917.c9d86d1-1.1
[   27s] [19/210] preinstalled debugedit-5.0-5.1
[   27s] [20/210] preinstalled diffutils-3.9-1.1
[   27s] [21/210] preinstalled dwz-0.15-2.1
[   27s] [22/210] preinstalled elfutils-0.189-2.1
[   27s] [23/210] cumulate fdupes-2.2.1-1.1
[   27s] [24/210] preinstalled file-5.44-1.3
[   27s] [25/210] preinstalled file-magic-5.44-1.3
[   27s] [26/210] preinstalled filesystem-84.87-12.1
[   27s] [27/210] preinstalled fillup-1.42-279.1
[   27s] [28/210] preinstalled findutils-4.9.0-2.1
[   27s] [29/210] preinstalled gawk-5.2.1-2.1
[   27s] [30/210] preinstalled gcc-13-1.1
[   27s] [31/210] preinstalled gcc-PIE-13-1.1
[   27s] [32/210] preinstalled gcc13-13.0.1+git6669-7.1
[   27s] [33/210] preinstalled gcc13-PIE-13.0.1+git6669-7.1
[   27s] [34/210] preinstalled gettext-runtime-mini-0.21.1-1.1
[   27s] [35/210] preinstalled gettext-tools-mini-0.21.1-1.1
[   27s] [36/210] preinstalled glibc-2.37-3.1
[   27s] [37/210] preinstalled glibc-devel-2.37-3.1
[   27s] [38/210] preinstalled glibc-locale-base-2.37-3.1
[   27s] [39/210] preinstalled grep-3.9-1.1
[   27s] [40/210] preinstalled gzip-1.12-3.1
[   27s] [41/210] preinstalled kernel-obs-build-6.2.9-1.1
[   27s] [42/210] cumulate libXau6-1.0.11-1.1
[   27s] [43/210] preinstalled libacl1-2.3.1-2.1
[   27s] [44/210] cumulate libalternatives1-1.2+3.b848aad-3.1
[   27s] [45/210] cumulate libaom3-3.6.0-1.1
[   27s] [46/210] preinstalled libasan8-13.0.1+git6669-7.1
[   27s] [47/210] preinstalled libasm1-0.189-2.1
[   27s] [48/210] preinstalled libatomic1-13.0.1+git6669-7.1
[   27s] [49/210] preinstalled libattr1-2.5.1-1.1
[   27s] [50/210] preinstalled libaudit1-3.0.9-1.1
[   27s] [51/210] preinstalled libblkid1-2.38.1-11.1
[   27s] [52/210] cumulate libbrotlicommon1-1.0.9-3.1
[   27s] [53/210] preinstalled libbz2-1-1.0.8-5.1
[   27s] [54/210] preinstalled libcap-ng0-0.8.3-1.1
[   27s] [55/210] preinstalled libcap2-2.68-1.1
[   27s] [56/210] preinstalled libcrypt1-4.4.33-3.1
[   27s] [57/210] preinstalled libctf-nobfd0-2.40-3.1
[   27s] [58/210] preinstalled libctf0-2.40-3.1
[   27s] [59/210] cumulate libdav1d6-1.1.0-3.1
[   27s] [60/210] preinstalled libdb-4_8-4.8.30-40.1
[   27s] [61/210] preinstalled libdw1-0.189-2.1
[   27s] [62/210] preinstalled libeconf0-0.5.2-1.1
[   27s] [63/210] preinstalled libelf1-0.189-2.1
[   27s] [64/210] preinstalled libexpat1-2.5.0-2.1
[   27s] [65/210] preinstalled libfdisk1-2.38.1-11.1
[   27s] [66/210] preinstalled libffi8-3.4.4-1.1
[   27s] [67/210] preinstalled libgcc_s1-13.0.1+git6669-7.1
[   27s] [68/210] preinstalled libgcrypt20-1.10.1-2.1
[   27s] [69/210] preinstalled libgdbm6-1.23-1.1
[   27s] [70/210] preinstalled libgdbm_compat4-1.23-1.1
[   27s] [71/210] preinstalled libgmp10-6.2.1-4.1
[   27s] [72/210] preinstalled libgomp1-13.0.1+git6669-7.1
[   27s] [73/210] preinstalled libgpg-error0-1.46-1.1
[   27s] [74/210] cumulate libimagequant0-2.18.0-1.1
[   27s] [75/210] preinstalled libisl23-0.25-1.1
[   27s] [76/210] preinstalled libitm1-13.0.1+git6669-7.1
[   27s] [77/210] cumulate libjbig2-2.1-4.1
[   27s] [78/210] cumulate libjpeg8-8.2.2-74.1
[   27s] [79/210] cumulate liblcms2-2-2.14-3.3
[   27s] [80/210] preinstalled liblua5_4-5-5.4.4-10.1
[   27s] [81/210] preinstalled liblzma5-5.4.2-1.1
[   27s] [82/210] preinstalled libmagic1-5.44-1.3
[   27s] [83/210] preinstalled libmount1-2.38.1-11.1
[   27s] [84/210] preinstalled libmpc3-1.3.1-1.2
[   27s] [85/210] preinstalled libmpdec3-2.5.1-2.1
[   27s] [86/210] preinstalled libmpfr6-4.2.0-1.1
[   27s] [87/210] preinstalled libncurses6-6.4.20230311-8.1
[   27s] [88/210] cumulate libopenjp2-7-2.5.0-3.1
[   27s] [89/210] preinstalled libopenssl3-3.0.8-2.1
[   27s] [90/210] preinstalled libpcre2-8-0-10.42-3.2
[   27s] [91/210] preinstalled libpkgconf3-1.8.0-2.1
[   27s] [92/210] cumulate libpng16-16-1.6.39-2.1
[   27s] [93/210] preinstalled libpopt0-1.19-1.1
[   27s] [94/210] preinstalled libpython3_10-1_0-3.10.10-2.1
[   27s] [95/210] preinstalled libpython3_11-1_0-3.11.2-1.2
[   27s] [96/210] preinstalled libpython3_9-1_0-3.9.16-5.1
[   27s] [97/210] cumulate librav1e0-0.6.2+0-1.1
[   27s] [98/210] preinstalled libreadline8-8.2-2.1
[   27s] [99/210] preinstalled librpmbuild9-4.18.0-4.2
[   27s] [100/210] preinstalled libseccomp2-2.5.4-2.1
[   27s] [101/210] preinstalled libselinux1-3.5-1.1
[   27s] [102/210] preinstalled libsemanage-conf-3.5-1.2
[   27s] [103/210] preinstalled libsemanage2-3.5-1.2
[   27s] [104/210] preinstalled libsepol2-3.5-1.1
[   27s] [105/210] preinstalled libsmartcols1-2.38.1-11.1
[   27s] [106/210] preinstalled libstdc++6-13.0.1+git6669-7.1
[   27s] [107/210] preinstalled libsubid4-4.13-4.1
[   27s] [108/210] preinstalled libubsan1-13.0.1+git6669-7.1
[   27s] [109/210] preinstalled libutempter0-1.2.0-3.2
[   27s] [110/210] preinstalled libuuid1-2.38.1-11.1
[   27s] [111/210] cumulate libwebp7-1.2.4-1.2
[   27s] [112/210] preinstalled libxcrypt-devel-4.4.33-3.1
[   27s] [113/210] preinstalled libz1-1.2.13-3.1
[   27s] [114/210] preinstalled libzstd1-1.5.4-2.1
[   27s] [115/210] preinstalled linux-glibc-devel-6.2-1.1
[   27s] [116/210] preinstalled login_defs-4.13-4.1
[   27s] [117/210] preinstalled lua54-5.4.4-10.1
[   27s] [118/210] preinstalled make-4.4.1-1.1
[   27s] [119/210] preinstalled ncurses-utils-6.4.20230311-8.1
[   27s] [120/210] preinstalled pam-1.5.2-14.1
[   27s] [121/210] preinstalled patch-2.7.6-6.1
[   27s] [122/210] preinstalled perl-5.36.0-4.1
[   27s] [123/210] preinstalled perl-base-5.36.0-4.1
[   27s] [124/210] preinstalled permissions-1599_20230217-1.1
[   27s] [125/210] preinstalled permissions-config-1599_20230217-1.1
[   27s] [126/210] preinstalled pkgconf-1.8.0-2.1
[   27s] [127/210] preinstalled pkgconf-m4-1.8.0-2.1
[   27s] [128/210] preinstalled pkgconf-pkg-config-1.8.0-2.1
[   27s] [129/210] preinstalled polkit-default-privs-1550+20230307.7f42172-1.1
[   27s] [130/210] preinstalled post-build-checks-84.87+git20230328.de7e9df-1.1
[   27s] [131/210] preinstalled python-rpm-macros-20230403.29b58f8-1.1
[   27s] [132/210] preinstalled python-rpm-packaging-20210526+a18ca48-1.2
[   27s] [133/210] cumulate python310-attrs-22.2.0-1.3
[   27s] [134/210] preinstalled python310-base-3.10.10-2.1
[   27s] [135/210] cumulate python310-devel-3.10.10-2.1
[   27s] [136/210] cumulate python310-exceptiongroup-1.1.1-1.2
[   27s] [137/210] cumulate python310-iniconfig-2.0.0-1.2
[   27s] [138/210] cumulate python310-olefile-0.46-3.6
[   27s] [139/210] preinstalled python310-packaging-23.0-2.1
[   27s] [140/210] cumulate python310-pluggy-1.0.0-1.6
[   27s] [141/210] cumulate python310-pycparser-2.21-1.6
[   27s] [142/210] preinstalled python310-setuptools-67.6.0-1.2
[   27s] [143/210] cumulate python310-tomli-2.0.1-1.4
[   27s] [144/210] cumulate python310-zipp-3.8.1-1.3
[   27s] [145/210] cumulate python311-attrs-22.2.0-1.3
[   27s] [146/210] preinstalled python311-base-3.11.2-1.2
[   27s] [147/210] cumulate python311-devel-3.11.2-1.2
[   27s] [148/210] cumulate python311-exceptiongroup-1.1.1-1.2
[   27s] [149/210] cumulate python311-iniconfig-2.0.0-1.2
[   27s] [150/210] cumulate python311-olefile-0.46-3.6
[   27s] [151/210] cumulate python311-packaging-23.0-2.2
[   27s] [152/210] cumulate python311-pluggy-1.0.0-1.6
[   27s] [153/210] cumulate python311-pycparser-2.21-1.6
[   27s] [154/210] preinstalled python311-setuptools-67.6.0-1.2
[   27s] [155/210] cumulate python311-tomli-2.0.1-1.4
[   27s] [156/210] cumulate python311-zipp-3.8.1-1.3
[   27s] [157/210] cumulate python39-attrs-22.2.0-1.3
[   27s] [158/210] preinstalled python39-base-3.9.16-5.1
[   27s] [159/210] cumulate python39-devel-3.9.16-5.1
[   27s] [160/210] cumulate python39-exceptiongroup-1.1.1-1.2
[   27s] [161/210] cumulate python39-iniconfig-2.0.0-1.2
[   27s] [162/210] cumulate python39-olefile-0.46-3.6
[   27s] [163/210] cumulate python39-packaging-23.0-2.2
[   27s] [164/210] cumulate python39-pluggy-1.0.0-1.6
[   27s] [165/210] cumulate python39-pycparser-2.21-1.6
[   27s] [166/210] preinstalled python39-setuptools-67.6.0-1.2
[   27s] [167/210] cumulate python39-tomli-2.0.1-1.4
[   27s] [168/210] cumulate python39-zipp-3.8.1-1.3
[   27s] [169/210] preinstalled qemu-linux-user-7.1.0-58.1
[   27s] [170/210] preinstalled rpm-4.18.0-4.2
[   27s] [171/210] preinstalled rpm-build-4.18.0-4.2
[   27s] [172/210] preinstalled rpm-build-perl-4.18.0-4.2
[   27s] [173/210] preinstalled rpm-config-SUSE-20220926-1.1
[   27s] [174/210] preinstalled rpmlint-mini-2.4.0+git20230403.7ce263c-10.3
[   27s] [175/210] preinstalled rpmlint-strict-2.4.0+git20230403.7ce263c-1.1
[   27s] [176/210] preinstalled sed-4.9-2.1
[   27s] [177/210] preinstalled shadow-4.13-4.1
[   27s] [178/210] preinstalled system-group-hardware-20170617-24.1
[   27s] [179/210] preinstalled system-user-root-20190513-2.1
[   27s] [180/210] preinstalled systemd-rpm-macros-20-1.1
[   27s] [181/210] preinstalled sysuser-shadow-3.1-5.1
[   27s] [182/210] preinstalled tar-1.34-10.1
[   27s] [183/210] preinstalled terminfo-base-6.4.20230311-8.1
[   27s] [184/210] preinstalled update-alternatives-1.21.8-1.1
[   27s] [185/210] preinstalled util-linux-2.38.1-11.1
[   27s] [186/210] preinstalled which-2.21-5.1
[   27s] [187/210] preinstalled xz-5.4.2-1.1
[   27s] [188/210] cumulate alts-1.2+3.b848aad-3.1
[   27s] [189/210] cumulate dav1d-devel-1.1.0-3.1
[   27s] [190/210] cumulate libaom-devel-3.6.0-1.1
[   27s] [191/210] cumulate libbrotlidec1-1.0.9-3.1
[   27s] [192/210] cumulate libwebpdemux2-1.2.4-1.2
[   27s] [193/210] cumulate libwebpmux3-1.2.4-1.2
[   27s] [194/210] cumulate libxcb1-1.15-2.1
[   27s] [195/210] cumulate python310-cffi-1.15.1-3.3
[   27s] [196/210] cumulate python310-importlib-metadata-6.1.0-2.1
[   27s] [197/210] cumulate python311-cffi-1.15.1-3.3
[   27s] [198/210] cumulate python311-importlib-metadata-6.1.0-2.1
[   27s] [199/210] cumulate python39-cffi-1.15.1-3.3
[   27s] [200/210] cumulate python39-importlib-metadata-6.1.0-2.1
[   27s] [201/210] cumulate libtiff6-4.5.0-3.1
[   27s] [202/210] cumulate libheif1-1.15.2-1.1
[   27s] [203/210] cumulate libfreetype6-2.13.0-1.1
[   27s] [204/210] cumulate libheif-devel-1.15.2-1.1
[   27s] [205/210] cumulate python310-pytest-7.2.0-3.2
[   27s] [206/210] cumulate python311-pytest-7.2.0-3.2
[   27s] [207/210] cumulate python39-pytest-7.2.0-3.2
[   27s] [208/210] cumulate python310-Pillow-9.5.0-1.1
[   27s] [209/210] cumulate python311-Pillow-9.5.0-1.1
[   27s] [210/210] cumulate python39-Pillow-9.5.0-1.1
[   27s] now installing cumulated packages
[   27s] Preparing...                          ########################################
[   27s] Updating / installing...
[   27s] libwebp7-1.2.4-1.2                    ########################################
[   27s] libjpeg8-8.2.2-74.1                   ########################################
[   27s] libwebpdemux2-1.2.4-1.2               ########################################
[   27s] libwebpmux3-1.2.4-1.2                 ########################################
[   27s] libopenjp2-7-2.5.0-3.1                ########################################
[   28s] liblcms2-2-2.14-3.3                   ########################################
[   28s] libimagequant0-2.18.0-1.1             ########################################
[   28s] libdav1d6-1.1.0-3.1                   ########################################
[   28s] libaom3-3.6.0-1.1                     ########################################
[   28s] libaom-devel-3.6.0-1.1                ########################################
[   28s] dav1d-devel-1.1.0-3.1                 ########################################
[   28s] python39-zipp-3.8.1-1.3               ########################################
[   28s] python39-importlib-metadata-6.1.0-2.1 ########################################
[   28s] python39-tomli-2.0.1-1.4              ########################################
[   28s] python39-pycparser-2.21-1.6           ########################################
[   28s] python39-pluggy-1.0.0-1.6             ########################################
[   28s] python39-packaging-23.0-2.2           ########################################
[   28s] python39-olefile-0.46-3.6             ########################################
[   28s] python39-iniconfig-2.0.0-1.2          ########################################
[   28s] python39-exceptiongroup-1.1.1-1.2     ########################################
[   28s] python39-attrs-22.2.0-1.3             ########################################
[   28s] python311-zipp-3.8.1-1.3              ########################################
[   28s] python311-importlib-metadata-6.1.0-2.1########################################
[   29s] python311-tomli-2.0.1-1.4             ########################################
[   29s] python311-pycparser-2.21-1.6          ########################################
[   29s] python311-pluggy-1.0.0-1.6            ########################################
[   29s] python311-packaging-23.0-2.2          ########################################
[   29s] python311-olefile-0.46-3.6            ########################################
[   29s] python311-iniconfig-2.0.0-1.2         ########################################
[   29s] python311-exceptiongroup-1.1.1-1.2    ########################################
[   29s] python311-attrs-22.2.0-1.3            ########################################
[   29s] python310-zipp-3.8.1-1.3              ########################################
[   29s] python310-importlib-metadata-6.1.0-2.1########################################
[   29s] python310-tomli-2.0.1-1.4             ########################################
[   29s] python310-pycparser-2.21-1.6          ########################################
[   29s] python310-pluggy-1.0.0-1.6            ########################################
[   29s] python310-olefile-0.46-3.6            ########################################
[   29s] python310-iniconfig-2.0.0-1.2         ########################################
[   29s] python310-exceptiongroup-1.1.1-1.2    ########################################
[   29s] python310-attrs-22.2.0-1.3            ########################################
[   29s] librav1e0-0.6.2+0-1.1                 ########################################
[   29s] libheif1-1.15.2-1.1                   ########################################
[   30s] libpng16-16-1.6.39-2.1                ########################################
[   30s] libjbig2-2.1-4.1                      ########################################
[   30s] libtiff6-4.5.0-3.1                    ########################################
[   30s] libbrotlicommon1-1.0.9-3.1            ########################################
[   30s] libbrotlidec1-1.0.9-3.1               ########################################
[   30s] libfreetype6-2.13.0-1.1               ########################################
[   30s] libalternatives1-1.2+3.b848aad-3.1    ########################################
[   30s] alts-1.2+3.b848aad-3.1                ########################################
[   30s] libXau6-1.0.11-1.1                    ########################################
[   30s] libxcb1-1.15-2.1                      ########################################
[   31s] python310-Pillow-9.5.0-1.1            ########################################
[   31s] python311-Pillow-9.5.0-1.1            ########################################
[   31s] python39-Pillow-9.5.0-1.1             ########################################
[   32s] python310-pytest-7.2.0-3.2            ########################################
[   32s] python311-pytest-7.2.0-3.2            ########################################
[   33s] python39-pytest-7.2.0-3.2             ########################################
[   33s] libheif-devel-1.15.2-1.1              ########################################
[   33s] python310-cffi-1.15.1-3.3             ########################################
[   33s] python311-cffi-1.15.1-3.3             ########################################
[   33s] python39-cffi-1.15.1-3.3              ########################################
[   33s] python39-devel-3.9.16-5.1             ########################################
[   34s] python311-devel-3.11.2-1.2            ########################################
[   34s] python310-devel-3.10.10-2.1           ########################################
[   34s] fdupes-2.2.1-1.1                      ########################################
[   36s] now finalizing build dir...
[   36s] ... running 01-add_abuild_user_to_trusted_group
[   36s] ... running 02-set_timezone_to_utc
[   36s] ... running 03-set-permissions-secure
[   36s] ... running 11-hack_uname_version_to_kernel_version
[   41s] -----------------------------------------------------------------
[   41s] I have the following modifications for python-pyheif.spec:
[   42s] 24c24
[   42s] < Release:        0
[   42s] ---
[   42s] > Release:        1.4
[   46s] build target is riscv64-suse-linux
[   46s] -----------------------------------------------------------------
[   46s] ----- building python-pyheif.spec (user abuild)
[   46s] -----------------------------------------------------------------
[   46s] -----------------------------------------------------------------
[   48s] + exec rpmbuild -ba --define '_srcdefattr (-,root,root)' --nosignature --target=riscv64-suse-linux --define '_build_create_debug 1' --define 'disturl obs://build.opensuse.org/openSUSE:Factory:RISCV/standard/83850d9132b15ef3ea0349ae2701dbb0-python-pyheif' /home/abuild/rpmbuild/SOURCES/python-pyheif.spec
[   65s] Building target platforms: riscv64-suse-linux
[   65s] Building for target riscv64-suse-linux
[   65s] setting SOURCE_DATE_EPOCH=1670889600
[   65s] Executing(%prep): /usr/bin/bash -e /var/tmp/rpm-tmp.WPs0rA
[   65s] + umask 022
[   65s] + cd /home/abuild/rpmbuild/BUILD
[   65s] + cd /home/abuild/rpmbuild/BUILD
[   65s] + rm -rf pyheif-release-0.7.1
[   65s] + /usr/lib/rpm/rpmuncompress -x /home/abuild/rpmbuild/SOURCES/pyheif-0.7.1.tar.gz
[   66s] + STATUS=0
[   66s] + '[' 0 -ne 0 ']'
[   66s] + cd pyheif-release-0.7.1
[   66s] + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
[   66s] + echo 'Patch #0 (remove-piexif.patch):'
[   66s] Patch #0 (remove-piexif.patch):
[   66s] + /usr/bin/patch --no-backup-if-mismatch -f -p1 --fuzz=0
[   66s] patching file tests/test_read.py
[   66s] + echo 'Patch #1 (dont-test-x265-files.patch):'
[   66s] Patch #1 (dont-test-x265-files.patch):
[   66s] + /usr/bin/patch --no-backup-if-mismatch -f -p1 --fuzz=0
[   66s] patching file tests/test_read.py
[   66s] + RPM_EC=0
[   66s] ++ jobs -p
[   66s] + exit 0
[   66s] Executing(%build): /usr/bin/bash -e /var/tmp/rpm-tmp.jGaL2q
[   66s] + umask 022
[   66s] + cd /home/abuild/rpmbuild/BUILD
[   66s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64
[   66s] ++ dirname /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64
[   66s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[   66s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64
[   66s] + cd pyheif-release-0.7.1
[   66s] + ref=/usr/lib/rpm
[   66s] + mints=0
[   66s] + case $(uname -m) in
[   66s] ++ uname -m
[   67s] + mints=20160911
[   67s] + for s in guess sub
[   67s] ++ find -maxdepth 8 -name config.guess
[   67s] + for s in guess sub
[   67s] ++ find -maxdepth 8 -name config.sub
[   67s] ++ '[' -f _current_flavor ']'
[   67s] ++ true
[   67s] + last_flavor=
[   67s] + '[' -z '' ']'
[   67s] + last_flavor=tmp
[   67s] + '[' tmp '!=' python39 ']'
[   67s] + '[' -d build ']'
[   67s] + '[' -d _build.python39 ']'
[   67s] + echo python39
[   67s] + python_flavor=python39
[   67s] + /usr/bin/python3.9 setup.py build '--executable=/usr/bin/python3.9 -s'
[   68s] /usr/lib/python3.9/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[   68s]   dist.fetch_build_eggs(dist.setup_requires)
[   68s] WARNING: The wheel package is not available.
[   69s] running build
[   69s] running build_py
[   69s] creating build
[   69s] creating build/lib.linux-riscv64-cpython-39
[   69s] creating build/lib.linux-riscv64-cpython-39/pyheif
[   69s] copying pyheif/__init__.py -> build/lib.linux-riscv64-cpython-39/pyheif
[   69s] copying pyheif/constants.py -> build/lib.linux-riscv64-cpython-39/pyheif
[   69s] copying pyheif/error.py -> build/lib.linux-riscv64-cpython-39/pyheif
[   69s] copying pyheif/reader.py -> build/lib.linux-riscv64-cpython-39/pyheif
[   69s] copying pyheif/writer.py -> build/lib.linux-riscv64-cpython-39/pyheif
[   69s] creating build/lib.linux-riscv64-cpython-39/pyheif/data
[   69s] copying pyheif/data/version.txt -> build/lib.linux-riscv64-cpython-39/pyheif/data
[   69s] running build_ext
[   69s] generating cffi module 'build/temp.linux-riscv64-cpython-39/_libheif_cffi.c'
[   69s] creating build/temp.linux-riscv64-cpython-39
[   70s] building '_libheif_cffi' extension
[   70s] creating build/temp.linux-riscv64-cpython-39/build
[   70s] creating build/temp.linux-riscv64-cpython-39/build/temp.linux-riscv64-cpython-39
[   70s] gcc -Wno-unused-result -Wsign-compare -DNDEBUG -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -DOPENSSL_LOAD_CONF -fwrapv -fno-semantic-interposition -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -fPIC -I/usr/local/include -I/usr/include -I/opt/local/include -I/usr/include/python3.9 -c build/temp.linux-riscv64-cpython-39/_libheif_cffi.c -o build/temp.linux-riscv64-cpython-39/build/temp.linux-riscv64-cpython-39/_libheif_cffi.o
[   89s] gcc -shared build/temp.linux-riscv64-cpython-39/build/temp.linux-riscv64-cpython-39/_libheif_cffi.o -L/usr/local/lib -L/usr/lib -L/lib -L/opt/local/lib -L/usr/lib64 -lheif -o build/lib.linux-riscv64-cpython-39/_libheif_cffi.abi3.so
[   89s] ++ '[' -f _current_flavor ']'
[   89s] ++ cat _current_flavor
[   89s] + last_flavor=python39
[   89s] + '[' -z python39 ']'
[   89s] + '[' python39 '!=' python311 ']'
[   89s] + '[' -d build ']'
[   89s] + mv build _build.python39
[   89s] + '[' -d _build.python311 ']'
[   89s] + echo python311
[   89s] + python_flavor=python311
[   89s] + /usr/bin/python3.11 setup.py build '--executable=/usr/bin/python3.11 -s'
[   91s] /usr/lib/python3.11/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[   91s]   dist.fetch_build_eggs(dist.setup_requires)
[   91s] WARNING: The wheel package is not available.
[   92s] running build
[   92s] running build_py
[   92s] creating build
[   92s] creating build/lib.linux-riscv64-cpython-311
[   92s] creating build/lib.linux-riscv64-cpython-311/pyheif
[   92s] copying pyheif/__init__.py -> build/lib.linux-riscv64-cpython-311/pyheif
[   92s] copying pyheif/constants.py -> build/lib.linux-riscv64-cpython-311/pyheif
[   92s] copying pyheif/error.py -> build/lib.linux-riscv64-cpython-311/pyheif
[   92s] copying pyheif/reader.py -> build/lib.linux-riscv64-cpython-311/pyheif
[   92s] copying pyheif/writer.py -> build/lib.linux-riscv64-cpython-311/pyheif
[   92s] creating build/lib.linux-riscv64-cpython-311/pyheif/data
[   92s] copying pyheif/data/version.txt -> build/lib.linux-riscv64-cpython-311/pyheif/data
[   92s] running build_ext
[   92s] generating cffi module 'build/temp.linux-riscv64-cpython-311/_libheif_cffi.c'
[   92s] creating build/temp.linux-riscv64-cpython-311
[   92s] building '_libheif_cffi' extension
[   92s] creating build/temp.linux-riscv64-cpython-311/build
[   92s] creating build/temp.linux-riscv64-cpython-311/build/temp.linux-riscv64-cpython-311
[   92s] gcc -Wsign-compare -DNDEBUG -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -DOPENSSL_LOAD_CONF -fwrapv -fno-semantic-interposition -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -fPIC -I/usr/local/include -I/usr/include -I/opt/local/include -I/usr/include/python3.11 -c build/temp.linux-riscv64-cpython-311/_libheif_cffi.c -o build/temp.linux-riscv64-cpython-311/build/temp.linux-riscv64-cpython-311/_libheif_cffi.o
[  111s] gcc -shared build/temp.linux-riscv64-cpython-311/build/temp.linux-riscv64-cpython-311/_libheif_cffi.o -L/usr/local/lib -L/usr/lib -L/lib -L/opt/local/lib -L/usr/lib64 -lheif -o build/lib.linux-riscv64-cpython-311/_libheif_cffi.abi3.so
[  112s] ++ '[' -f _current_flavor ']'
[  112s] ++ cat _current_flavor
[  112s] + last_flavor=python311
[  112s] + '[' -z python311 ']'
[  112s] + '[' python311 '!=' python310 ']'
[  112s] + '[' -d build ']'
[  112s] + mv build _build.python311
[  112s] + '[' -d _build.python310 ']'
[  112s] + echo python310
[  112s] + python_flavor=python310
[  112s] + /usr/bin/python3.10 setup.py build '--executable=/usr/bin/python3.10 -s'
[  113s] /usr/lib/python3.10/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[  113s]   dist.fetch_build_eggs(dist.setup_requires)
[  113s] WARNING: The wheel package is not available.
[  114s] running build
[  114s] running build_py
[  114s] creating build
[  114s] creating build/lib.linux-riscv64-cpython-310
[  114s] creating build/lib.linux-riscv64-cpython-310/pyheif
[  114s] copying pyheif/__init__.py -> build/lib.linux-riscv64-cpython-310/pyheif
[  114s] copying pyheif/constants.py -> build/lib.linux-riscv64-cpython-310/pyheif
[  114s] copying pyheif/error.py -> build/lib.linux-riscv64-cpython-310/pyheif
[  114s] copying pyheif/reader.py -> build/lib.linux-riscv64-cpython-310/pyheif
[  114s] copying pyheif/writer.py -> build/lib.linux-riscv64-cpython-310/pyheif
[  114s] creating build/lib.linux-riscv64-cpython-310/pyheif/data
[  114s] copying pyheif/data/version.txt -> build/lib.linux-riscv64-cpython-310/pyheif/data
[  114s] running build_ext
[  114s] generating cffi module 'build/temp.linux-riscv64-cpython-310/_libheif_cffi.c'
[  114s] creating build/temp.linux-riscv64-cpython-310
[  115s] building '_libheif_cffi' extension
[  115s] creating build/temp.linux-riscv64-cpython-310/build
[  115s] creating build/temp.linux-riscv64-cpython-310/build/temp.linux-riscv64-cpython-310
[  115s] gcc -Wno-unused-result -Wsign-compare -DNDEBUG -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -DOPENSSL_LOAD_CONF -fwrapv -fno-semantic-interposition -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -O2 -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -Werror=return-type -g -IVendor/ -fPIC -I/usr/local/include -I/usr/include -I/opt/local/include -I/usr/include/python3.10 -c build/temp.linux-riscv64-cpython-310/_libheif_cffi.c -o build/temp.linux-riscv64-cpython-310/build/temp.linux-riscv64-cpython-310/_libheif_cffi.o
[  134s] gcc -shared build/temp.linux-riscv64-cpython-310/build/temp.linux-riscv64-cpython-310/_libheif_cffi.o -L/usr/local/lib -L/usr/lib -L/lib -L/opt/local/lib -L/usr/lib64 -lheif -o build/lib.linux-riscv64-cpython-310/_libheif_cffi.abi3.so
[  134s] + RPM_EC=0
[  134s] ++ jobs -p
[  134s] + exit 0
[  135s] Executing(%install): /usr/bin/bash -e /var/tmp/rpm-tmp.CSKrTo
[  135s] + umask 022
[  135s] + cd /home/abuild/rpmbuild/BUILD
[  135s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64
[  135s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[  135s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64
[  135s] + cd pyheif-release-0.7.1
[  135s] ++ '[' -f _current_flavor ']'
[  135s] ++ cat _current_flavor
[  135s] + last_flavor=python310
[  135s] + '[' -z python310 ']'
[  135s] + '[' python310 '!=' python39 ']'
[  135s] + '[' -d build ']'
[  135s] + mv build _build.python310
[  135s] + '[' -d _build.python39 ']'
[  135s] + mv _build.python39 build
[  135s] + echo python39
[  135s] + python_flavor=python39
[  135s] + /usr/bin/python3.9 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64 --prefix /usr
[  136s] /usr/lib/python3.9/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[  136s]   dist.fetch_build_eggs(dist.setup_requires)
[  136s] WARNING: The wheel package is not available.
[  137s] running install
[  137s] /usr/lib/python3.9/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  137s]   warnings.warn(
[  138s] running install_lib
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/error.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/reader.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/writer.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif
[  138s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/data
[  138s] copying build/lib.linux-riscv64-cpython-39/pyheif/data/version.txt -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/data
[  138s] copying build/lib.linux-riscv64-cpython-39/_libheif_cffi.abi3.so -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages
[  138s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/__init__.py to __init__.cpython-39.pyc
[  138s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/constants.py to constants.cpython-39.pyc
[  138s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/error.py to error.cpython-39.pyc
[  138s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py to reader.cpython-39.pyc
[  138s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/writer.py to writer.cpython-39.pyc
[  138s] writing byte-compilation script '/tmp/tmp3jd71d5n.py'
[  138s] /usr/bin/python3.9 /tmp/tmp3jd71d5n.py
[  139s] removing /tmp/tmp3jd71d5n.py
[  139s] running install_egg_info
[  139s] running egg_info
[  139s] creating pyheif.egg-info
[  139s] writing pyheif.egg-info/PKG-INFO
[  139s] writing dependency_links to pyheif.egg-info/dependency_links.txt
[  139s] writing requirements to pyheif.egg-info/requires.txt
[  139s] writing top-level names to pyheif.egg-info/top_level.txt
[  139s] writing manifest file 'pyheif.egg-info/SOURCES.txt'
[  139s] reading manifest file 'pyheif.egg-info/SOURCES.txt'
[  139s] reading manifest template 'MANIFEST.in'
[  139s] adding license file 'LICENSE'
[  139s] writing manifest file 'pyheif.egg-info/SOURCES.txt'
[  139s] Copying pyheif.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif-0.7.1-py3.9.egg-info
[  139s] running install_scripts
[  140s] ++ '[' -f _current_flavor ']'
[  140s] ++ cat _current_flavor
[  140s] + last_flavor=python39
[  140s] + '[' -z python39 ']'
[  140s] + '[' python39 '!=' python311 ']'
[  140s] + '[' -d build ']'
[  140s] + mv build _build.python39
[  140s] + '[' -d _build.python311 ']'
[  140s] + mv _build.python311 build
[  140s] + echo python311
[  140s] + python_flavor=python311
[  140s] + /usr/bin/python3.11 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64 --prefix /usr
[  141s] /usr/lib/python3.11/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[  141s]   dist.fetch_build_eggs(dist.setup_requires)
[  141s] WARNING: The wheel package is not available.
[  142s] running install
[  142s] /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  142s]   warnings.warn(
[  142s] running install_lib
[  142s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11
[  142s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages
[  142s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/error.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/reader.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/writer.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif
[  142s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/data
[  142s] copying build/lib.linux-riscv64-cpython-311/pyheif/data/version.txt -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/data
[  142s] copying build/lib.linux-riscv64-cpython-311/_libheif_cffi.abi3.so -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages
[  142s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__init__.py to __init__.cpython-311.pyc
[  142s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/constants.py to constants.cpython-311.pyc
[  142s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/error.py to error.cpython-311.pyc
[  142s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/reader.py to reader.cpython-311.pyc
[  142s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/writer.py to writer.cpython-311.pyc
[  142s] writing byte-compilation script '/tmp/tmpyd28njiq.py'
[  142s] /usr/bin/python3.11 /tmp/tmpyd28njiq.py
[  143s] removing /tmp/tmpyd28njiq.py
[  143s] running install_egg_info
[  143s] running egg_info
[  143s] writing pyheif.egg-info/PKG-INFO
[  143s] writing dependency_links to pyheif.egg-info/dependency_links.txt
[  143s] writing requirements to pyheif.egg-info/requires.txt
[  143s] writing top-level names to pyheif.egg-info/top_level.txt
[  143s] reading manifest file 'pyheif.egg-info/SOURCES.txt'
[  143s] reading manifest template 'MANIFEST.in'
[  143s] adding license file 'LICENSE'
[  143s] writing manifest file 'pyheif.egg-info/SOURCES.txt'
[  143s] Copying pyheif.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif-0.7.1-py3.11.egg-info
[  144s] running install_scripts
[  144s] ++ '[' -f _current_flavor ']'
[  144s] ++ cat _current_flavor
[  144s] + last_flavor=python311
[  144s] + '[' -z python311 ']'
[  144s] + '[' python311 '!=' python310 ']'
[  144s] + '[' -d build ']'
[  144s] + mv build _build.python311
[  144s] + '[' -d _build.python310 ']'
[  144s] + mv _build.python310 build
[  144s] + echo python310
[  144s] + python_flavor=python310
[  144s] + /usr/bin/python3.10 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64 --prefix /usr
[  146s] /usr/lib/python3.10/site-packages/setuptools/__init__.py:85: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated. Requirements should be satisfied by a PEP 517 installer. If you are using pip, you can try `pip install --use-pep517`.
[  146s]   dist.fetch_build_eggs(dist.setup_requires)
[  146s] WARNING: The wheel package is not available.
[  147s] running install
[  147s] /usr/lib/python3.10/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  147s]   warnings.warn(
[  147s] running install_lib
[  147s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10
[  147s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages
[  147s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/error.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/reader.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/writer.py -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif
[  147s] creating /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/data
[  147s] copying build/lib.linux-riscv64-cpython-310/pyheif/data/version.txt -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/data
[  147s] copying build/lib.linux-riscv64-cpython-310/_libheif_cffi.abi3.so -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/__init__.py to __init__.cpython-310.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/constants.py to constants.cpython-310.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/error.py to error.cpython-310.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/reader.py to reader.cpython-310.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/writer.py to writer.cpython-310.pyc
[  147s] writing byte-compilation script '/tmp/tmp9jj0bccl.py'
[  147s] /usr/bin/python3.10 /tmp/tmp9jj0bccl.py
[  148s] removing /tmp/tmp9jj0bccl.py
[  148s] running install_egg_info
[  148s] running egg_info
[  148s] writing pyheif.egg-info/PKG-INFO
[  148s] writing dependency_links to pyheif.egg-info/dependency_links.txt
[  148s] writing requirements to pyheif.egg-info/requires.txt
[  148s] writing top-level names to pyheif.egg-info/top_level.txt
[  148s] reading manifest file 'pyheif.egg-info/SOURCES.txt'
[  148s] reading manifest template 'MANIFEST.in'
[  148s] adding license file 'LICENSE'
[  148s] writing manifest file 'pyheif.egg-info/SOURCES.txt'
[  148s] Copying pyheif.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif-0.7.1-py3.10.egg-info
[  148s] running install_scripts
[  149s] ++ '[' -f _current_flavor ']'
[  149s] ++ cat _current_flavor
[  149s] + last_flavor=python310
[  149s] + '[' -z python310 ']'
[  149s] + '[' python310 '!=' python39 ']'
[  149s] + '[' -d build ']'
[  149s] + mv build _build.python310
[  149s] + '[' -d _build.python39 ']'
[  149s] + mv _build.python39 build
[  149s] + echo python39
[  149s] + python_flavor=python39
[  149s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/__pycache__/writer.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/__pycache__/writer.cpython-39.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/__pycache__/constants.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/__pycache__/constants.cpython-39.pyc
[  149s] ++ '[' -f _current_flavor ']'
[  149s] ++ cat _current_flavor
[  149s] + last_flavor=python39
[  149s] + '[' -z python39 ']'
[  149s] + '[' python39 '!=' python311 ']'
[  149s] + '[' -d build ']'
[  149s] + mv build _build.python39
[  149s] + '[' -d _build.python311 ']'
[  149s] + mv _build.python311 build
[  149s] + echo python311
[  149s] + python_flavor=python311
[  149s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/writer.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/writer.cpython-311.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/reader.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/reader.cpython-311.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/error.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/error.cpython-311.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/constants.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/constants.cpython-311.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/pyheif/__pycache__/__init__.cpython-311.pyc
[  149s] ++ '[' -f _current_flavor ']'
[  149s] ++ cat _current_flavor
[  149s] + last_flavor=python311
[  149s] + '[' -z python311 ']'
[  149s] + '[' python311 '!=' python310 ']'
[  149s] + '[' -d build ']'
[  149s] + mv build _build.python311
[  149s] + '[' -d _build.python310 ']'
[  149s] + mv _build.python310 build
[  149s] + echo python310
[  149s] + python_flavor=python310
[  149s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/__pycache__/writer.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/__pycache__/writer.cpython-310.pyc
[  149s] Linking /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/__pycache__/constants.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/pyheif/__pycache__/constants.cpython-310.pyc
[  149s] + /usr/lib/rpm/find-debuginfo -j4 -n --run-dwz --dwz-low-mem-die-limit 10000000 --dwz-max-die-limit 50000000 -S debugsourcefiles.list /home/abuild/rpmbuild/BUILD/pyheif-release-0.7.1
[  150s] extracting debug info from /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.10/site-packages/_libheif_cffi.abi3.so
[  150s] extracting debug info from /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/_libheif_cffi.abi3.so
[  150s] extracting debug info from /home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.11/site-packages/_libheif_cffi.abi3.so
[  151s] original debug info size: 684kB, size after compression: 628kB
[  151s] /usr/lib/rpm/sepdebugcrcfix: Updated 3 CRC32s, 0 CRC32s did match.
[  152s] cpio: pyheif-release-0.7.1/build/temp.linux-riscv64-cpython-311/_libheif_cffi.c: Cannot stat: No such file or directory
[  152s] cpio: pyheif-release-0.7.1/build/temp.linux-riscv64-cpython-39/_libheif_cffi.c: Cannot stat: No such file or directory
[  152s] 541 blocks
[  152s] + /usr/lib/rpm/brp-compress
[  152s] + /usr/lib/rpm/brp-suse
[  152s] calling /usr/lib/rpm/brp-suse.d/brp-05-permissions
[  152s] calling /usr/lib/rpm/brp-suse.d/brp-15-strip-debug
[  152s] calling /usr/lib/rpm/brp-suse.d/brp-25-symlink
[  152s] calling /usr/lib/rpm/brp-suse.d/brp-50-generate-fips-hmac
[  152s] calling /usr/lib/rpm/brp-suse.d/brp-75-ar
[  153s] Executing(%check): /usr/bin/bash -e /var/tmp/rpm-tmp.HVyCj9
[  153s] + umask 022
[  153s] + cd /home/abuild/rpmbuild/BUILD
[  153s] + cd pyheif-release-0.7.1
[  153s] + set +x
[  153s] Using libalternatives variant 39 for py.test in XDG_CONFIG_HOME during Python 3.9 expansions.
[  153s] Using libalternatives variant 39 for pytest in XDG_CONFIG_HOME during Python 3.9 expansions.
[  153s] Using libalternatives variant 311 for py.test in XDG_CONFIG_HOME during Python 3.11 expansions.
[  153s] Using libalternatives variant 311 for pytest in XDG_CONFIG_HOME during Python 3.11 expansions.
[  154s] + export PATH=/home/abuild/rpmbuild/BUILD/pyheif-release-0.7.1/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  154s] + PATH=/home/abuild/rpmbuild/BUILD/pyheif-release-0.7.1/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  154s] ++ '[' -f _current_flavor ']'
[  154s] ++ cat _current_flavor
[  154s] + last_flavor=python310
[  154s] + '[' -z python310 ']'
[  154s] + '[' python310 '!=' python39 ']'
[  154s] + '[' -d build ']'
[  154s] + mv build _build.python310
[  154s] + '[' -d _build.python39 ']'
[  154s] + mv _build.python39 build
[  154s] + echo python39
[  154s] + python_flavor=python39
[  154s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages
[  154s] + PYTHONDONTWRITEBYTECODE=1
[  154s] + pytest-3.9 --ignore=_build.python39 --ignore=_build.python311 --ignore=_build.python310 -v
[  156s] ============================= test session starts ==============================
[  156s] platform linux -- Python 3.9.16, pytest-7.2.0, pluggy-1.0.0 -- /usr/bin/python3.9
[  156s] cachedir: .pytest_cache
[  156s] rootdir: /home/abuild/rpmbuild/BUILD/pyheif-release-0.7.1
[  157s] collecting ... collected 122 items
[  157s] 
[  157s] tests/test_read.py::test_check[path0] PASSED                             [  0%]
[  157s] tests/test_read.py::test_check[path1] PASSED                             [  1%]
[  157s] tests/test_read.py::test_check[path2] PASSED                             [  2%]
[  157s] tests/test_read.py::test_check[path3] PASSED                             [  3%]
[  157s] tests/test_read.py::test_check[path4] PASSED                             [  4%]
[  157s] tests/test_read.py::test_check[path5] PASSED                             [  4%]
[  157s] tests/test_read.py::test_check[path6] PASSED                             [  5%]
[  157s] tests/test_read.py::test_check[path7] PASSED                             [  6%]
[  157s] tests/test_read.py::test_check[path8] PASSED                             [  7%]
[  157s] tests/test_read.py::test_check[path9] PASSED                             [  8%]
[  157s] tests/test_read.py::test_check[path10] PASSED                            [  9%]
[  157s] tests/test_read.py::test_check[path11] PASSED                            [  9%]
[  157s] tests/test_read.py::test_check[path12] PASSED                            [ 10%]
[  157s] tests/test_read.py::test_check[path13] PASSED                            [ 11%]
[  157s] tests/test_read.py::test_check[path14] PASSED                            [ 12%]
[  157s] tests/test_read.py::test_check[path15] PASSED                            [ 13%]
[  157s] tests/test_read.py::test_get_bytes_from_path[path0] PASSED               [ 13%]
[  157s] tests/test_read.py::test_get_bytes_from_path[path1] PASSED               [ 14%]
[  157s] tests/test_read.py::test_get_bytes_from_file_name[path0] PASSED          [ 15%]
[  157s] tests/test_read.py::test_get_bytes_from_file_name[path1] PASSED          [ 16%]
[  157s] tests/test_read.py::test_get_bytes_from_file_object[path0] PASSED        [ 17%]
[  157s] tests/test_read.py::test_get_bytes_from_file_object[path1] PASSED        [ 18%]
[  157s] tests/test_read.py::test_get_bytes_from_bytes[path0] PASSED              [ 18%]
[  157s] tests/test_read.py::test_get_bytes_from_bytes[path1] PASSED              [ 19%]
[  157s] tests/test_read.py::test_check_heif_properties[heif_file0] ERROR         [ 20%]
[  157s] tests/test_read.py::test_read_icc_color_profile[heif_file0] ERROR        [ 21%]
[  158s] tests/test_read.py::test_read_pillow_frombytes[heif_file0] ERROR         [ 22%]
[  158s] tests/test_read.py::test_check_heif_properties[heif_file1] ERROR         [ 22%]
[  158s] tests/test_read.py::test_read_icc_color_profile[heif_file1] ERROR        [ 23%]
[  158s] tests/test_read.py::test_read_pillow_frombytes[heif_file1] ERROR         [ 24%]
[  159s] tests/test_read.py::test_check_heif_properties[heif_file2] ERROR         [ 25%]
[  159s] tests/test_read.py::test_read_icc_color_profile[heif_file2] ERROR        [ 26%]
[  159s] tests/test_read.py::test_read_pillow_frombytes[heif_file2] ERROR         [ 27%]
[  159s] tests/test_read.py::test_check_heif_properties[heif_file3] ERROR         [ 27%]
[  159s] tests/test_read.py::test_read_icc_color_profile[heif_file3] ERROR        [ 28%]
[  159s] tests/test_read.py::test_read_pillow_frombytes[heif_file3] ERROR         [ 29%]
[  160s] tests/test_read.py::test_check_heif_properties[heif_file4] ERROR         [ 30%]
[  160s] tests/test_read.py::test_read_icc_color_profile[heif_file4] ERROR        [ 31%]
[  160s] tests/test_read.py::test_read_pillow_frombytes[heif_file4] ERROR         [ 31%]
[  160s] tests/test_read.py::test_check_heif_properties[heif_file5] ERROR         [ 32%]
[  160s] tests/test_read.py::test_read_icc_color_profile[heif_file5] ERROR        [ 33%]
[  161s] tests/test_read.py::test_read_pillow_frombytes[heif_file5] ERROR         [ 34%]
[  161s] tests/test_read.py::test_check_heif_properties[heif_file6] ERROR         [ 35%]
[  161s] tests/test_read.py::test_read_icc_color_profile[heif_file6] ERROR        [ 36%]
[  161s] tests/test_read.py::test_read_pillow_frombytes[heif_file6] ERROR         [ 36%]
[  161s] tests/test_read.py::test_check_heif_properties[heif_file7] ERROR         [ 37%]
[  162s] tests/test_read.py::test_read_icc_color_profile[heif_file7] ERROR        [ 38%]
[  162s] tests/test_read.py::test_read_pillow_frombytes[heif_file7] ERROR         [ 39%]
[  162s] tests/test_read.py::test_check_heif_properties[heif_file8] ERROR         [ 40%]
[  162s] tests/test_read.py::test_read_icc_color_profile[heif_file8] ERROR        [ 40%]
[  163s] tests/test_read.py::test_read_pillow_frombytes[heif_file8] ERROR         [ 41%]
[  163s] tests/test_read.py::test_check_heif_properties[heif_file9] ERROR         [ 42%]
[  163s] tests/test_read.py::test_read_icc_color_profile[heif_file9] ERROR        [ 43%]
[  163s] tests/test_read.py::test_read_pillow_frombytes[heif_file9] ERROR         [ 44%]
[  163s] tests/test_read.py::test_check_heif_properties[heif_file10] ERROR        [ 45%]
[  164s] tests/test_read.py::test_read_icc_color_profile[heif_file10] ERROR       [ 45%]
[  164s] tests/test_read.py::test_read_pillow_frombytes[heif_file10] ERROR        [ 46%]
[  164s] tests/test_read.py::test_check_heif_properties[heif_file11] ERROR        [ 47%]
[  164s] tests/test_read.py::test_read_icc_color_profile[heif_file11] ERROR       [ 48%]
[  164s] tests/test_read.py::test_read_pillow_frombytes[heif_file11] ERROR        [ 49%]
[  165s] tests/test_read.py::test_check_heif_properties[heif_file12] ERROR        [ 50%]
[  165s] tests/test_read.py::test_read_icc_color_profile[heif_file12] ERROR       [ 50%]
[  165s] tests/test_read.py::test_read_pillow_frombytes[heif_file12] ERROR        [ 51%]
[  165s] tests/test_read.py::test_check_heif_properties[heif_file13] ERROR        [ 52%]
[  165s] tests/test_read.py::test_read_icc_color_profile[heif_file13] ERROR       [ 53%]
[  166s] tests/test_read.py::test_read_pillow_frombytes[heif_file13] ERROR        [ 54%]
[  166s] tests/test_read.py::test_check_heif_properties[heif_file14] ERROR        [ 54%]
[  166s] tests/test_read.py::test_read_icc_color_profile[heif_file14] ERROR       [ 55%]
[  166s] tests/test_read.py::test_read_pillow_frombytes[heif_file14] ERROR        [ 56%]
[  166s] tests/test_read.py::test_check_heif_properties[heif_file15] ERROR        [ 57%]
[  167s] tests/test_read.py::test_read_icc_color_profile[heif_file15] ERROR       [ 58%]
[  167s] tests/test_read.py::test_read_pillow_frombytes[heif_file15] ERROR        [ 59%]
[  167s] tests/test_read.py::test_open_and_load[path0] FAILED                     [ 59%]
[  167s] tests/test_read.py::test_open_and_load[path1] FAILED                     [ 60%]
[  167s] tests/test_read.py::test_open_and_load[path2] FAILED                     [ 61%]
[  167s] tests/test_read.py::test_open_and_load[path3] FAILED                     [ 62%]
[  168s] tests/test_read.py::test_open_and_load[path4] FAILED                     [ 63%]
[  168s] tests/test_read.py::test_open_and_load[path5] FAILED                     [ 63%]
[  168s] tests/test_read.py::test_open_and_load[path6] FAILED                     [ 64%]
[  168s] tests/test_read.py::test_open_and_load[path7] FAILED                     [ 65%]
[  168s] tests/test_read.py::test_open_and_load[path8] FAILED                     [ 66%]
[  168s] tests/test_read.py::test_open_and_load[path9] FAILED                     [ 67%]
[  168s] tests/test_read.py::test_open_and_load[path10] FAILED                    [ 68%]
[  169s] tests/test_read.py::test_open_and_load[path11] FAILED                    [ 68%]
[  169s] tests/test_read.py::test_open_and_load[path12] FAILED                    [ 69%]
[  169s] tests/test_read.py::test_open_and_load[path13] FAILED                    [ 70%]
[  169s] tests/test_read.py::test_open_and_load[path14] FAILED                    [ 71%]
[  169s] tests/test_read.py::test_open_and_load[path15] FAILED                    [ 72%]
[  169s] tests/test_read.py::test_open_and_load_data_not_collected[path0] FAILED  [ 72%]
[  170s] tests/test_read.py::test_open_and_load_data_not_collected[path1] FAILED  [ 73%]
[  170s] tests/test_read.py::test_open_and_load_data_not_collected[path2] FAILED  [ 74%]
[  170s] tests/test_read.py::test_open_and_load_data_not_collected[path3] FAILED  [ 75%]
[  170s] tests/test_read.py::test_open_and_load_data_not_collected[path4] FAILED  [ 76%]
[  170s] tests/test_read.py::test_open_and_load_data_not_collected[path5] FAILED  [ 77%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path6] FAILED  [ 77%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path7] FAILED  [ 78%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path8] FAILED  [ 79%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path9] FAILED  [ 80%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path10] FAILED [ 81%]
[  171s] tests/test_read.py::test_open_and_load_data_not_collected[path11] FAILED [ 81%]
[  172s] tests/test_read.py::test_open_and_load_data_not_collected[path12] FAILED [ 82%]
[  172s] tests/test_read.py::test_open_and_load_data_not_collected[path13] FAILED [ 83%]
[  172s] tests/test_read.py::test_open_and_load_data_not_collected[path14] FAILED [ 84%]
[  172s] tests/test_read.py::test_open_and_load_data_not_collected[path15] FAILED [ 85%]
[  172s] tests/test_read.py::test_open_container[path0] FAILED                    [ 86%]
[  172s] tests/test_read.py::test_open_container[path1] FAILED                    [ 86%]
[  173s] tests/test_read.py::test_open_container[path2] FAILED                    [ 87%]
[  173s] tests/test_read.py::test_open_container[path3] FAILED                    [ 88%]
[  173s] tests/test_read.py::test_open_container[path4] FAILED                    [ 89%]
[  173s] tests/test_read.py::test_open_container[path5] FAILED                    [ 90%]
[  173s] tests/test_read.py::test_open_container[path6] FAILED                    [ 90%]
[  173s] tests/test_read.py::test_open_container[path7] FAILED                    [ 91%]
[  174s] tests/test_read.py::test_open_container[path8] FAILED                    [ 92%]
[  174s] tests/test_read.py::test_open_container[path9] FAILED                    [ 93%]
[  174s] tests/test_read.py::test_open_container[path10] FAILED                   [ 94%]
[  174s] tests/test_read.py::test_open_container[path11] FAILED                   [ 95%]
[  174s] tests/test_read.py::test_open_container[path12] FAILED                   [ 95%]
[  174s] tests/test_read.py::test_open_container[path13] FAILED                   [ 96%]
[  174s] tests/test_read.py::test_open_container[path14] FAILED                   [ 97%]
[  175s] tests/test_read.py::test_open_container[path15] FAILED                   [ 98%]
[  175s] tests/test_versions.py::test_libheif_version PASSED                      [ 99%]
[  175s] tests/test_versions.py::test_pyheif_version PASSED                       [100%]
[  175s] 
[  175s] ==================================== ERRORS ====================================
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file0] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file0]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000341240>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file0] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file0]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000341240>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file0] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file0]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000341240>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file1] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file1]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000bee00>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file1] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file1]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000bee00>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file1] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file1]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000bee00>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file2] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file2]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40002e00d0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file2] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file2]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40002e00d0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file2] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file2]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40002e00d0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file3] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file3]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b75e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file3] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file3]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b75e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file3] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file3]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b75e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file4] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file4]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000339070>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file4] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file4]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000339070>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file4] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file4]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000339070>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file5] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file5]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003a0c10>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file5] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file5]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003a0c10>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file5] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file5]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003a0c10>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file6] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file6]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400033d790>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file6] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file6]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400033d790>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file6] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file6]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400033d790>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file7] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file7]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001e0020>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file7] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file7]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001e0020>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file7] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file7]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001e0020>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file8] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file8]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000152820>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file8] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file8]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000152820>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file8] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file8]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000152820>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_check_heif_properties[heif_file9] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file9]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001f09a0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file9] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file9]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001f09a0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ___________ ERROR at setup of test_read_pillow_frombytes[heif_file9] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file9]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001f09a0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file10] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file10]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000011fe0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file10] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file10]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000011fe0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file10] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file10]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000011fe0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file11] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file11]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001bb170>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file11] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file11]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001bb170>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file11] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file11]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001bb170>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file12] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file12]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003bf050>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file12] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file12]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003bf050>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file12] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file12]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003bf050>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file13] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file13]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000456d90>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file13] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file13]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000456d90>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file13] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file13]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000456d90>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file14] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file14]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400039d5b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file14] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file14]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400039d5b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file14] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file14]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400039d5b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_check_heif_properties[heif_file15] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file15]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400021a0b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_icc_color_profile[heif_file15] __________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file15]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400021a0b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________ ERROR at setup of test_read_pillow_frombytes[heif_file15] ___________
[  175s] 
[  175s] request = <SubRequest 'heif_file' for <Function test_check_heif_properties[heif_file15]>>
[  175s] 
[  175s]     @pytest.fixture(scope="session", params=heif_files)
[  175s]     def heif_file(request):
[  175s] >       return pyheif.read(request.param)
[  175s] 
[  175s] tests/test_read.py:58: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:103: in read
[  175s]     return heif_file.load()
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400021a0b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] =================================== FAILURES ===================================
[  175s] __________________________ test_open_and_load[path0] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40002544d0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path1] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400021a040>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path2] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003abf60>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path3] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000f9e90>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path4] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.10bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40002a4120>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path5] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.8bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000200be0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path6] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000369910>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path7] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b44b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path8] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003c1120>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path9] ___________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001555c0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path10] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400030b580>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path11] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40001e0020>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path12] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400007de30>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path13] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000102300>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path14] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b44b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_and_load[path15] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load(path):
[  175s]         heif_file = pyheif.open(path)
[  175s]         assert heif_file.size[0] > 0
[  175s]         assert heif_file.size[1] > 0
[  175s]         assert heif_file.has_alpha is not None
[  175s]         assert heif_file.mode is not None
[  175s]         assert heif_file.bit_depth is not None
[  175s]     
[  175s]         assert heif_file.data is None
[  175s]         assert heif_file.stride is None
[  175s]     
[  175s]         if path.name == "arrow.heic":
[  175s]             assert heif_file.metadata
[  175s]             assert heif_file.color_profile
[  175s]     
[  175s] >       res = heif_file.load()
[  175s] 
[  175s] tests/test_read.py:102: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003bf050>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path0] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000a24a0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path1] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000186500>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path2] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003a7650>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path3] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003654e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path4] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.10bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b44b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path5] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.8bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000378590>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path6] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000186500>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path7] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400030b580>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path8] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003654e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________ test_open_and_load_data_not_collected[path9] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003a7650>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path10] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000306ea0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path11] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400021a040>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path12] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003b44b0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path13] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400031b260>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path14] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400041f630>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] ________________ test_open_and_load_data_not_collected[path15] _________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_and_load_data_not_collected(path):
[  175s]         data = path.read_bytes()
[  175s]         heif_file = pyheif.open(data)
[  175s]     
[  175s]         # heif_file.load() should work even if there is no other refs
[  175s]         # to the source data.
[  175s]         data = None
[  175s]         gc.collect()
[  175s]     
[  175s] >       heif_file.load()
[  175s] 
[  175s] tests/test_read.py:126: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003abf60>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path0] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003654e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path1] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400007d3c0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path2] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40000a24a0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path3] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000186500>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path4] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.10bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003aff90>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path5] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile1.8bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000204f40>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path6] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400039dc20>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path7] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000011fe0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path8] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000369910>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] __________________________ test_open_container[path9] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000286cc0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path10] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400027a890>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path11] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x4000369910>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path12] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400041c700>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path13] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400015ef30>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path14] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x400039f4e0>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] _________________________ test_open_container[path15] __________________________
[  175s] 
[  175s] path = PosixPath('tests/images/avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.avif')
[  175s] 
[  175s]     @pytest.mark.parametrize("path", heif_files)
[  175s]     def test_open_container(path):
[  175s]         container = pyheif.open_container(path)
[  175s]         assert container is not None
[  175s]         assert container.primary_image is not None
[  175s]         assert len(container.top_level_images) > 0
[  175s]     
[  175s]         if path.name == "multiimage.heic":
[  175s]             assert len(container.top_level_images) == 5
[  175s]     
[  175s]         n_primary_images = 0
[  175s]         for top_level_image in container.top_level_images:
[  175s]             if top_level_image.is_primary:
[  175s]                 n_primary_images += 1
[  175s]                 assert container.primary_image == top_level_image
[  175s] >           top_level_image.image.load()
[  175s] 
[  175s] tests/test_read.py:144: 
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:47: in load
[  175s]     self.data, self.stride = _read_heif_image(self._heif_handle, self)
[  175s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  175s] 
[  175s] handle = <cdata 'struct heif_image_handle *' 0x40003bf000>
[  175s] heif_file = <UndecodedHeifFile 1204x800 RGB with no data>
[  175s] 
[  175s]     def _read_heif_image(handle, heif_file):
[  175s]         colorspace = _constants.heif_colorspace_RGB
[  175s]         if heif_file.convert_hdr_to_8bit or heif_file.bit_depth <= 8:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGBA
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RGB
[  175s]         else:
[  175s]             if heif_file.has_alpha:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBBAA_BE
[  175s]             else:
[  175s]                 chroma = _constants.heif_chroma_interleaved_RRGGBB_BE
[  175s]     
[  175s]         p_options = _libheif_cffi.lib.heif_decoding_options_alloc()
[  175s]         p_options = _libheif_cffi.ffi.gc(
[  175s]             p_options, _libheif_cffi.lib.heif_decoding_options_free
[  175s]         )
[  175s] >       p_options.ignore_transformations = int(not heif_file.apply_transformations)
[  175s] E       ffi.error: struct heif_decoding_options: wrong total size (cdef says 48, but C compiler says 56). fix it or use "...;" as the last field in the cdef for struct heif_decoding_options to make it flexible
[  175s] 
[  175s] ../../BUILDROOT/python-pyheif-0.7.1-1.4.riscv64/usr/lib64/python3.9/site-packages/pyheif/reader.py:402: error
[  175s] =========================== short test summary info ============================
[  175s] FAILED tests/test_read.py::test_open_and_load[path0] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path1] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path2] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path3] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path4] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path5] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path6] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path7] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path8] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path9] - ffi.error: struct heif...
[  175s] FAILED tests/test_read.py::test_open_and_load[path10] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load[path11] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load[path12] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load[path13] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load[path14] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load[path15] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path0] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path1] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path2] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path3] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path4] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path5] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path6] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path7] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path8] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path9] - ffi...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path10] - ff...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path11] - ff...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path12] - ff...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path13] - ff...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path14] - ff...
[  175s] FAILED tests/test_read.py::test_open_and_load_data_not_collected[path15] - ff...
[  175s] FAILED tests/test_read.py::test_open_container[path0] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path1] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path2] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path3] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path4] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path5] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path6] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path7] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path8] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path9] - ffi.error: struct hei...
[  175s] FAILED tests/test_read.py::test_open_container[path10] - ffi.error: struct he...
[  175s] FAILED tests/test_read.py::test_open_container[path11] - ffi.error: struct he...
[  175s] FAILED tests/test_read.py::test_open_container[path12] - ffi.error: struct he...
[  175s] FAILED tests/test_read.py::test_open_container[path13] - ffi.error: struct he...
[  175s] FAILED tests/test_read.py::test_open_container[path14] - ffi.error: struct he...
[  175s] FAILED tests/test_read.py::test_open_container[path15] - ffi.error: struct he...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file0] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file0] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file0] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file1] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file1] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file1] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file2] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file2] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file2] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file3] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file3] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file3] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file4] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file4] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file4] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file5] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file5] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file5] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file6] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file6] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file6] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file7] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file7] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file7] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file8] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file8] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file8] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file9] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file9] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file9] - ffi.error:...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file10] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file10] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file10] - ffi.error...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file11] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file11] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file11] - ffi.error...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file12] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file12] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file12] - ffi.error...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file13] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file13] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file13] - ffi.error...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file14] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file14] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file14] - ffi.error...
[  175s] ERROR tests/test_read.py::test_check_heif_properties[heif_file15] - ffi.error...
[  175s] ERROR tests/test_read.py::test_read_icc_color_profile[heif_file15] - ffi.erro...
[  175s] ERROR tests/test_read.py::test_read_pillow_frombytes[heif_file15] - ffi.error...
[  175s] ================== 48 failed, 26 passed, 48 errors in 19.23s ===================
[  175s] error: Bad exit status from /var/tmp/rpm-tmp.HVyCj9 (%check)
[  175s] 
[  175s] RPM build errors:
[  175s]     Bad exit status from /var/tmp/rpm-tmp.HVyCj9 (%check)
[  175s] ### VM INTERACTION START ###
[  176s] [  170.982129][    T1] sysrq: Power Off
[  176s] [  170.983811][    T7] reboot: Power down
[  176s] ### VM INTERACTION END ###
[  176s] 
[  176s] sheep88 failed "build python-pyheif.spec" at Fri Apr  7 14:50:49 UTC 2023.
[  176s] 
